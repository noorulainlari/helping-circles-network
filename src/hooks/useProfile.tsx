
import { useState, useEffect } from 'react';
import { useAuth } from './useAuth';
import { supabase } from '@/integrations/supabase/client';

interface Profile {
  id: string;
  full_name: string;
  email: string;
  referral_code: string;
  referred_by: string | null;
  status: 'inactive' | 'active' | 'suspended';
  wallet_balance: number;
  total_roi_earned: number;
  total_referral_earned: number;
  total_withdrawn: number;
  package_id: string | null;
  package_activated_at: string | null;
  created_at: string;
}

export const useProfile = () => {
  const { user, loading: authLoading } = useAuth();
  const [profile, setProfile] = useState<Profile | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchProfile = async () => {
    if (!user) {
      setProfile(null);
      setLoading(false);
      return;
    }

    try {
      setLoading(true);
      console.log('Fetching profile for user:', user.id);
      
      const { data, error } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', user.id)
        .maybeSingle(); // Use maybeSingle instead of single

      if (error) {
        console.error('Error fetching profile:', error);
        setError(error.message);
        
        // If profile doesn't exist, create it
        if (error.code === 'PGRST116') {
          console.log('Profile not found, creating new profile...');
          const { data: newProfile, error: createError } = await supabase
            .from('profiles')
            .insert({
              id: user.id,
              full_name: user.user_metadata?.full_name || user.email?.split('@')[0] || 'User',
              email: user.email || '',
              referral_code: '', // Will be generated by trigger
              status: 'inactive',
              wallet_balance: 0,
              total_roi_earned: 0,
              total_referral_earned: 0,
              total_withdrawn: 0
            })
            .select()
            .single();

          if (createError) {
            console.error('Error creating profile:', createError);
            setError('Failed to create profile');
          } else {
            console.log('Profile created successfully:', newProfile);
            setProfile(newProfile);
            setError(null);
          }
        }
      } else {
        console.log('Profile fetched successfully:', data);
        setProfile(data);
        setError(null);
      }
    } catch (err: any) {
      console.error('Unexpected error:', err);
      setError('Failed to fetch profile');
      setProfile(null);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (!authLoading) {
      fetchProfile();
    }
  }, [user, authLoading]);

  return { 
    profile, 
    loading: authLoading || loading, 
    error, 
    refetch: fetchProfile 
  };
};
